#include <REG51F380.H>

K_SWITCH EQU P0.7
K_MUTE EQU P0.6
//STATES
S_UPDATE EQU 0
S_TONE EQU 1
S_MUTE EQU 2
S_SWITCH EQU 3

ARRAY_SERIE EQU 80H
ARRAY_TONS EQU 90H

DSEG AT 30H
	STATE: DS 1
	NEXT_STATE: DS 1
	SIZE: DS 1

BSEG AT 0H
	F_FRAME: DBIT 1

CSEG AT 0H
	JMP INIT
CSEG AT 0BH
	JMP ISR_TIMER0
CSEG AT 23H
	JMP ISR_UART
CSEG AT 50H
INIT:
	;SYSCLK 48MHz
	MOV FLSCL, #90H
	MOV CLKSEL, #3H
	
	MOV PCA0MD, #0
	MOV XBR1, #40H
	
	MOV SP, #(255-32)
	
	;Mapear TxD e RxD
	MOV XBR0, #1
	MOV SCON0, #10H ;RECEÇÃO PERMITIDA
	
	MOV CKCON, #0AH
	
	MOV TMOD, #22H
	MOV TH1, #30H
	MOV TL1, #30H
	SETB TR1
	
	;ISR
	SETB ET0
	SETB ES0
	SETB EA
	
MAIN:
	MOV NEXT_STATE, #S_UPDATE
	MOV STATE, #S_UPDATE
	MOV SIZE, #0
	CLR F_FRAME
	MOV R0, #ARRAY_SERIE
	MOV R1, #ARRAY_TONS
MAIN_FSM:
	MOV STATE, NEXT_STATE
	CALL FSM_JMPTABLE
	
	JMP MAIN_FSM
FSM_JMPTABLE:
	MOV A, STATE
	RL A
	MOV DPTR, #TAB_SALTOS
	JMP @A+DPTR
TAB_SALTOS:
	AJMP ROT_UPDATE
	AJMP ROT_TONE
	AJMP ROT_MUTE
	AJMP ROT_SWITCH
	
ROT_UPDATE:
	JNB F_FRAME, $
	MOV SIZE, #0
	CLR ES0
	MOV R0, #ARRAY_SERIE
	MOV R1, #ARRAY_TONS
ROT_UPDATE_LOOP:
	MOV A, @R0
	MOV @R1, A
	INC R0
	INC R1
	CJNE R1, #(ARRAY_TONS+4), ROT_UPDATE_LOOP
	CLR F_FRAME
	MOV R0, #ARRAY_SERIE
	MOV R1, #ARRAY_TONS
	SETB ES0
	MOV NEXT_STATE, #S_SWITCH
RET

ROT_TONE:
	MOV TH0, @R1
	SETB TR0
ROT_TONE_LOOP:
	JB F_FRAME, ROT_TONE_FRAME
	JNB K_SWITCH, ROT_TONE_SWITCH
	JNB K_MUTE, ROT_TONE_MUTE
	JMP ROT_TONE_LOOP
ROT_TONE_FRAME:
	MOV NEXT_STATE, #S_UPDATE
	RET
ROT_TONE_SWITCH:
	JNB K_SWITCH,$
	MOV NEXT_STATE, #S_SWITCH
	RET
ROT_TONE_MUTE:
    JNB K_MUTE,$
	MOV NEXT_STATE, #S_MUTE
	RET

ROT_SWITCH:
	INC R1
	CJNE R1, #(ARRAY_TONS+4), ROT_SWITCH_LOOP
	MOV R1, #ARRAY_TONS
ROT_SWITCH_LOOP:
	MOV TH0, @R1
	MOV NEXT_STATE, #S_TONE
RET

ROT_MUTE:
	CLR TR0
	CLR P1.0
	JB K_SWITCH, $
	JNB K_SWITCH,$
	MOV NEXT_STATE, #S_TONE
RET
	


ISR_UART:
	USING 0
	PUSH PSW
	PUSH ACC
	JNB RI0, ISR_UART_FIM
	CLR RI0
	MOV R7, SBUF0
	CALL ROT_INSERIR_ARRAY
	MOV A, #4
	XRL A, SIZE
	;Outra maneira
	;CLR C
	;SUBB A, SIZE
	JNZ ISR_UART_FIM
	SETB F_FRAME
	MOV SIZE, #0
ISR_UART_FIM:
	CLR TI0
	POP ACC
	POP PSW
RETI

ISR_TIMER0:
	CPL P1.0
ISR_TIMER0_FIM:
RETI

ROT_INSERIR_ARRAY:
	MOV A, R7
	MOV @R0, A
	INC R0
	INC SIZE

RET



END