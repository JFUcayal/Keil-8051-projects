#include <REG51F380.H>

TAB_CHAVE	EQU 80H
TAB_SECRET	EQU 88H

BSEG AT 0H
NOT_EQUAL: DBIT 1
		
CSEG AT 0
	SJMP INIT
CSEG AT 30H
	
INIT:
	MOV FLSCL,#90H
	MOV CLKSEL,#3
	MOV PCA0MD,#0
	MOV XBR1,#40H
	
	SJMP MAIN
	
MAIN:
	MOV R1,#TAB_CHAVE
	MOV R2,#1
	CALL SR_INSERE_CHAVE
	MOV R1,#TAB_CHAVE
	MOV R2,#7
	CALL SR_INSERE_CHAVE
	MOV R1,#TAB_CHAVE
	MOV R2,#9
	CALL SR_INSERE_CHAVE
	MOV R1,#TAB_CHAVE
	MOV R2,#0AH
	
SR_INSERE_CHAVE:
	MOV R1,#TAB_SECRET
	MOV DPTR,#CHAVE_SECRETA
	CLR A
	MOVC A,@A+DPTR
	MOV R2,A
	CALL SR_INSERE_CHAVE
	
	MOV R1,#TAB_SECRET
	CLR A
	INC DPTR
	MOVC A,@A+DPTR
	MOV R2,A
	CALL SR_INSERE_CHAVE

	MOV R1,#TAB_SECRET
	CLR A
	INC DPTR
	MOVC A,@A+DPTR
	MOV R2,A
	CALL SR_INSERE_CHAVE

	MOV R1,#TAB_SECRET
	CLR A
	INC DPTR
	MOVC A,@A+DPTR
	MOV R2,A
	CALL SR_INSERE_CHAVE

	CALL SR_COMP_KEYS
	JMP $

SR_COMP_KEYS:
	PUSH ACC 
	USING 0
	PUSH AR2
	
	CLR NOT_EQUAL
	MOV R2,#5
SR_COMP_LOOP:
	MOV A,@R0
	XRL A,@R1
	JZ SR_COMP_ZERO
	SETB NOT_EQUAL
	JMP SR_COMP_FIM

SR_COMP_ZERO:
	INC R0
	INC R1
	DJNZ R2,SR_COMP_LOOP
	
SR_COMP_FIM:
	POP AR2
	POP ACC
	RET
	
JMP $
	

CHAVE_SECRETA:
	DB 3,7,8,11
		
END